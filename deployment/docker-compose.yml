version: '3.8'

services:
  # Main Privatus-chat application
  privatus-chat:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.multistage
      target: production
    container_name: privatus-chat
    restart: unless-stopped
    ports:
      - "8000-9000:8000-9000"  # P2P networking range
      - "8080:8080"             # Optional web interface
    volumes:
      - privatus_data:/app/data
      - ./config:/app/config:ro
    environment:
      - PRIVATUS_DATA_DIR=/app/data
      - NODE_ENV=production
      - LOG_LEVEL=INFO
    networks:
      - privatus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('.'); from src.main import main; print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.privatus.rule=Host(`privatus.localhost`)"
      - "traefik.http.services.privatus.loadbalancer.server.port=8080"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: privatus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-privatus_secure_password}
    volumes:
      - redis_data:/data
    networks:
      - privatus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for metadata storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: privatus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: privatus
      POSTGRES_USER: privatus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-privatus_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - privatus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U privatus -d privatus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: privatus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - docs_data:/usr/share/nginx/html/docs:ro
    depends_on:
      - privatus-chat
    networks:
      - privatus-network
    labels:
      - "traefik.enable=false"

  # Monitoring and logging
  monitoring:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.monitoring
    container_name: privatus-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"  # Prometheus metrics
      - "3001:3001"  # Grafana dashboard
    volumes:
      - monitoring_data:/app/data
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - privatus-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-privatus_admin}

  # Development environment
  development:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.multistage
      target: development
    container_name: privatus-dev
    restart: unless-stopped
    ports:
      - "8001:8000"  # Development port
    volumes:
      - ..:/app  # Mount entire source for development
      - privatus_dev_data:/app/data
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
    networks:
      - privatus-network
    profiles:
      - dev

  # Testing environment
  testing:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.multistage
      target: testing
    container_name: privatus-testing
    restart: "no"
    volumes:
      - ..:/app:ro
      - test_results:/app/test_results
    environment:
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/test_results/.coverage
    networks:
      - privatus-network
    profiles:
      - test

  # Documentation server
  docs:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.multistage
      target: documentation
    container_name: privatus-docs
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - docs_data:/usr/share/nginx/html
    networks:
      - privatus-network
    profiles:
      - docs

  # Security scanning
  security-scan:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.multistage
      target: security-scan
    container_name: privatus-security
    restart: "no"
    volumes:
      - ..:/app:ro
      - scan_results:/app/scan_results
    networks:
      - privatus-network
    profiles:
      - security

# Named volumes for data persistence
volumes:
  privatus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data

  privatus_dev_data:
    driver: local

  redis_data:
    driver: local

  postgres_data:
    driver: local

  monitoring_data:
    driver: local

  docs_data:
    driver: local

  test_results:
    driver: local

  scan_results:
    driver: local

# Network configuration
networks:
  privatus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Service dependencies and startup order
x-service-dependencies:
  - condition: service_healthy
    services:
      - redis
      - postgres

# Development overrides
x-development-overrides:
  &development-overrides
  restart: always
  environment:
    - NODE_ENV=development
    - LOG_LEVEL=DEBUG
  volumes:
    - ..:/app

# Production overrides
x-production-overrides:
  &production-overrides
  restart: unless-stopped
  environment:
    - NODE_ENV=production
    - LOG_LEVEL=INFO
  deploy:
    resources:
      limits:
        memory: 512M
      reservations:
        memory: 256M