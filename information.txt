Privatus-chat Codebase Analysis
================================

Generated: 2025-06-19

Table of Contents
-----------------
1. High-Level Overview
2. Directory & Component Overview
3. Detailed Module Descriptions
   3.1 anonymity (Privacy & Onion Routing)
   3.2 communication (Voice Calls)
   3.3 crypto (Cryptographic Primitives)
   3.4 gui (Desktop Interface)
   3.5 messaging (Messaging & Group Chat)
   3.6 network (P2P & DHT Layer)
   3.7 performance (Optimization Suite)
   3.8 security (Auditing & Fuzzing)
   3.9 storage (Local Persistence)
4. Runtime Architecture & Data Flow
5. Build, Deployment & Dependency Information
6. Testing Infrastructure
7. Documentation Landscape
8. Conclusion

1. High-Level Overview
----------------------
Privatus-chat is a decentralized, end-to-end encrypted chat application designed
for maximum privacy, anonymity, and cross-platform usability.  The project's
core pillars are:
• Strong cryptography (Signal Protocol / Double Ratchet)
• Onion-routed networking with traffic-analysis resistance
• Cross-platform GUI (PyQt6) with dark/light themes
• Voice calls, file transfer, and group messaging
• Rigorous security auditing, performance monitoring, and automated deployment

The repository is structured around a `src/` Python package that contains all
runtime code, complemented by `docs/`, `examples/`, `deployment/`, and
`tests/` directories.

2. Directory & Component Overview
---------------------------------
• config/            – Environment-specific configuration files (.env)
• deployment/        – Scripts for packaging, auto-updating, and platform hooks
• docs/              – End-user & developer documentation (markdown)
• examples/          – Demonstration scripts for major subsystems
• src/               – Application source code (nine sub-packages)
• tests/             – Pytest test-suite covering crypto, network, anonymity
• requirements*.txt  – Runtime & dev dependencies
• pyproject.toml     – Build/metadata & tooling configuration
• roadmap.txt        – 46-KB roadmap describing completed & future phases

3. Detailed Module Descriptions
-------------------------------
3.1 anonymity
~~~~~~~~~~~~~
• anonymous_identity.py   – Generates and manages unlinkable user identities.
• onion_routing.py        – Builds multi-hop onion circuits; wraps/unwraps layers.
• privacy_controls.py     – User-level toggles for anonymity features.
• traffic_analysis.py     – Heuristics to detect & mitigate traffic correlation.

3.2 communication
~~~~~~~~~~~~~~~~~
• voice_calls.py          – WebRTC-style audio channel with encryption wrapper.

3.3 crypto
~~~~~~~~~~
• double_ratchet.py       – Implements the Signal Double Ratchet algorithm.
• encryption.py           – Symmetric & asymmetric helper functions (libsodium).
• key_management.py       – X3DH key-exchange, pre-key store, key rotation.
• secure_random.py        – Cryptographically secure RNG abstraction.

3.4 gui
~~~~~~~
• components.py           – Reusable Qt widgets (chat bubbles, contact list).
• gui_app.py              – QApplication bootstrap & event loop.
• main_window.py          – Main chat window; integrates tabs & toolbars.
• privacy_dashboard.py    – Real-time circuit visualization & metrics.
• settings_dialog.py      – Multi-tab settings (network, security, theme).
• themes.py               – Dark/light QSS themes & dynamic switching.

3.5 messaging
~~~~~~~~~~~~~
• file_transfer.py        – Chunked, encrypted file uploads/downloads.
• group_chat.py           – Group-state management & group key agreement.
• group_crypto.py         – Cryptographic helpers specific to group chat.
• message_router.py       – Routes messages between peers, applies onion layers.

3.6 network
~~~~~~~~~~~
• connection_manager.py   – Maintains outbound/inbound peer connections.
• kademlia_dht.py         – Decentralized lookup for peer discovery.
• message_protocol.py     – Binary framing and serialization of chat packets.
• nat_traversal.py        – STUN/TURN-like hole-punching utilities.
• p2p_node.py             – High-level peer node composed of above modules.
• peer_discovery.py       – Periodic discovery & liveness checks.

3.7 performance
~~~~~~~~~~~~~~~
• crypto_optimizer.py     – Vectorized/compiled crypto hot-paths.
• memory_optimizer.py     – Memory pool & zero-copy buffers.
• network_optimizer.py    – Adaptive congestion window tuning.
• performance_monitor.py  – Centralized metrics collector.
• scalability_optimizer.py – Horizontal scaling strategies for relay nodes.

3.8 security
~~~~~~~~~~~~
• bug_bounty_manager.py   – Automates researcher submissions & payouts.
• compliance_manager.py   – GDPR/FIPS policy enforcement.
• protocol_fuzzer.py      – Mutation-based fuzzing of message protocol.
• security_auditor.py     – Static analysis & CVE mapping.
• vulnerability_scanner.py – Dependency/Ops scanning with CVSS scoring.

3.9 storage
~~~~~~~~~~~
• database.py             – SQLCipher3 wrapper for encrypted SQLite storage.
• enhanced_storage.py     – Tiered caching & encrypted blob store.
• storage_manager.py      – High-level persistence API used by other modules.

4. Runtime Architecture & Data Flow
-----------------------------------
1. GUI layer (`src.gui`) captures user actions and emits intents.
2. Intents enter the Messaging layer (`src.messaging`) which:
   a. Encrypts payloads via `src.crypto` (Double Ratchet / group keys).
   b. Wraps packets in onion layers via `src.anonymity`.
3. Network layer (`src.network`) transports packets peer-to-peer using
   Kademlia DHT for discovery and NAT traversal for connectivity.
4. Received packets follow the reverse path, ultimately triggering GUI updates.
5. Voice calls stream RTP-style frames through the same anonymized tunnels.
6. Performance & security subsystems operate as cross-cutting concerns,
   continuously monitoring, optimizing, and auditing the runtime.

Sequence Diagram (textual)
~~~~~~~~~~~~~~~~~~~~~~~~~~
GUI → Messaging → Crypto → Anonymity → Network → Remote Peer
←───────────────────────────────────────────────────────────

5. Build, Deployment & Dependency Information
---------------------------------------------
• Build System: PEP-517 via `setuptools`, declared in `pyproject.toml`.
• Python Version: 3.11+ required.
• Core Dependencies (requirements.txt):
  PyQt6, cryptography, PyNaCl, aiohttp, aiofiles, sqlcipher3, python-dotenv,
  pydantic, colorlog, PyInstaller.
• Dev/Tooling: Black, Pylint, MyPy, PyTest, Coverage.
• Deployment Scripts (`deployment/`):
  – `cross_platform.py`  : Generates MSI, DMG, AppImage packages.
  – `auto_updater.py`    : Delta update server & client.
  – `platform_integration.py` : Registers protocol handlers, adds shortcuts.
  – `deploy.py`          : CI/CD entrypoint that orchestrates the above.

6. Testing Infrastructure
-------------------------
`pytest` with coverage.  Unit tests reside in `tests/`, covering:
• Cryptography edge cases
• Network message routing & NAT traversal
• Anonymity circuit formation
Continuous integration configured via `pyproject.toml` options.

7. Documentation Landscape
--------------------------
`docs/` directory provides:
• User docs: installation-guide, user-guide, security best practices, FAQ.
• Developer docs: architecture overview, API reference, developer guide.
Additional project plans & research notes live in `Document/` and roadmap.txt.

8. Conclusion
-------------
Privatus-chat is a feature-rich, production-ready secure messaging platform with
comprehensive cryptographic, networking, UI, and security subsystems.  Its
modular architecture facilitates further extension (mobile ports, advanced
media sharing) while preserving strong privacy guarantees. 